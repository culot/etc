" Intro {{{1
"-----------------------------------------------------------------------------
"
" My vimrc was inspired by the following ones:
"   * example found in original distribution
"   * http://vim.wikia.com/wiki/Example_vimrc
"
" After editing .vimrc file, use one of the following to reload:
"   :so %
"   :so $MYVIMRC (:echo $MYVIMRC to see what config file is in use)
"
" To better view this file, use folding:
"   :se fdm=marker
" and then zM or zR to close or open all folds
"
" Changelog {{{1
"-----------------------------------------------------------------------------
"   2012-06-29 - Creation
"   2012-09-12 - Status line format added
"   2012-10-10 - Default directory for swap files set
"   2013-02-17 - Long lines highlighting added
"   2013-03-05 - Update GUI options + add LaTeX-related keybindings
"   2013-03-06 - Remap this annoying <C-w>o keybinding
"   2013-03-11 - Function added to toggle between tabs and spaces
"   2013-04-26 - Highlighting of hidden characters (tabs, spaces) added
"   2013-06-27 - Add a function to convert a buffer to style(9),
"                use <Leader> in mappings,
"                add vimwiki plugin options
"   2013-09-12 - Add a style for $job code and my own style
"                add a tag in statusline to show current style
"                add the ability to save current vim session
"                new way of highlighting the 80th column
"                tab number added in tabline
"   2014-02-03 - remap Q (never use ex-mode)
"   2015-03-18 - Adapt GUI options (theme, font) and add some
"                features to navigate between files (path,
"                keybindings to find files, tags...)
"   2015-03-19 - Add a function to switch between header and source files
"   2015-04-15 - Add configuration variables for taglist and
"                omnicppcomplete plugins
"                add keybindings related to quickfix window
"   2015-10-02 - Adapt colorscheme depending on if the gui is run or not
"                Anonymize so that this config file could be uploaded to
"                a public git repo
"   2015-10-07 - Function to save session now takes a session name as
"                input
"   2015-10-08 - Set a few variables such as t_Co, scrolloff, wildignore,...
"   2015-10-14 - Try a new shortcut to quickly save in insert mode, and
"                prevent swap files from being created
"   2015-10-30 - New keybinding to quickly switch between light and dark
"                background, and increase default font size. I'm getting old :'(
"   2015-12-22 - A few variables added for netrw
"   2015-12-23 - Bindings and configuration for Unite plugin added


" Features {{{1
"-----------------------------------------------------------------------------
"
" These options and commands enable some very useful features in Vim, that
" no user should have to live without.

" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible

" Attempt to determine the type of a file based on its name and possibly its
" contents.  Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype plugin indent on

" Enable syntax highlighting
syntax on


" Colors {{{1
"-----------------------------------------------------------------------------
"
" The dark blue for comments is not very readable on black background
highlight Comment ctermfg=DarkCyan guifg=LightBlue

" Define custum highlight groups
hi User1 ctermbg=white ctermfg=red         guibg=white guifg=red
hi User2 ctermbg=white ctermfg=blue        guibg=white guifg=blue
hi User3 ctermbg=white ctermfg=green       guibg=white guifg=green
hi User4 ctermbg=white ctermfg=DarkMagenta guibg=white guifg=DarkMagenta

" The 80th column will be highlighted using the following color
hi ColorColumn ctermfg=darkmagenta ctermbg=black guifg=darkmagenta guibg=black


" Global variables {{{1
"-----------------------------------------------------------------------------
"
set path=$PWD/**
set tags=./tags;

let g:myStatusStyle = "?"
let s:mySessionPath = "~/bak/vim/sessions/"


" Options {{{1
"-----------------------------------------------------------------------------
"
" Set the default directory to store swap files
set dir=~/bak/vim
set noswapfile

" One of the most important options to activate. Allows you to switch from an
" unsaved buffer without saving it first. Also allows you to keep an undo
" history for multiple files. Vim will complain if you try to quit without
" saving, and swap files will keep you safe if your computer crashes.
set hidden

" Better command-line completion
set wildmenu
set wildignore=*.o

" Set how keyword completion works when using CTRL-N or CTRL_P
" (only use words from buffers, no tag or include, this is done
"  by omnicppcomplete)
set cpt=.,w,b,u

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" Modelines have historically been a source of security vulnerabilities.  As
" such, it may be a good idea to disable them and use the securemodelines
" script, <http://www.vim.org/scripts/script.php?script_id=1876>.
" set nomodeline

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
" set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
" set ruler

" Set the status line format (see :h stl)
"(this could be done on one line but will be split for clarity)
set statusline=
"set statusline+=%4* "switch to user defined highlight color
set statusline+=%t\  "file name
"set statusline+=%2*
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%h "help file flag
set statusline+=%1* "switch to User1 highlight color
set statusline+=%m "modified flag
set statusline+=%r "read only flag
set statusline+=%*
set statusline+=%y "filetype
set statusline+=\ (tw=%{&tw} "text width
set statusline+=%{&colorcolumn?'!)':')'} "add an indicator if 80th column is marked
set statusline+=(->\|=%{&expandtab?&sw.'spc':'tab'}) "tab or spaces indicator
set statusline+=(%{myStatusStyle}) " indentation style indicator
"set statusline+=%* "switch back to status line highlight
set statusline+=%= "left/right separator
set statusline+=[%l/%L\ \|\ %c]\ "cursor line/total lines | column number
set statusline+=%P "percent through file

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell.  If visualbell is set, and
" this line is also included, vim will neither flash nor beep.  If visualbell
" is unset, this does nothing.
set t_vb=

" Enable use of the mouse for all modes
" (allows to click on tabs and scroll with mouse even inside terminal :)
if has('mouse')
  set mouse=a
endif

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Encoding to get French accents
"set encoding=latin-1

" Do not underline current line
set nocursorline

" This is the list of hidden characters that will be displayed
" when using ':set list' (see mappings)
set listchars=eol:$,tab:>-,trail:.,extends:>,precedes:<,nbsp:_

" Add a few lines around the cursor so that the context is easier to get
set scrolloff=5

" Apparently it helps with performance when executing macros
set lazyredraw


" Functions {{{1
"-----------------------------------------------------------------------------
"
" allow toggling between local and default mode
" (taken from: http://vim.wikia.com/wiki/Toggle_between_tabs_and_spaces)
function! TabToggle()
    if &expandtab
        set shiftwidth=8
        set softtabstop=0
        set noexpandtab
    else
        call Own_Style()
    endif
endfunction

" Toggle the marking of the 80th column mark
" for color configuration, see variable ColorColumn
function! ToggleEightyColumnMark()
    if &colorcolumn
       set colorcolumn=""
    else
        set colorcolumn=80
    endif
endfunction

" easily find the corresponding header when coding in C++
function! SwitchSourceHeader()
  "update!
  if (expand ("%:e") == "cc")
    find %:t:r.h
  else
    find %:t:r.cc
  endif
endfunction


" Following style taken from /usr/src/tools/tools/editing/freebsd.vim

" Ignore indents caused by parentheses in FreeBSD style.
function! IgnoreParenIndent()
    let indent = cindent(v:lnum)

    if indent > 4000
        if cindent(v:lnum - 1) > 4000
            return indent(v:lnum - 1)
        else
            return indent(v:lnum - 1) + 4
        endif
    else
        return (indent)
    endif
endfun


" Follow the FreeBSD style(9).
function! FreeBSD_Style()
    setlocal cindent
    setlocal cinoptions=(4200,u4200,+0.5s,*500,:0,t0,U4200
    setlocal indentexpr=IgnoreParenIndent()
    setlocal indentkeys=0{,0},0),:,0#,!^F,o,O,e
    setlocal noexpandtab
    setlocal shiftwidth=8
    setlocal tabstop=8
    setlocal textwidth=80
    let g:myStatusStyle="fbsd"
endfun

" Follow $job's style
function! Job_Style()
    setlocal shiftwidth=2
    setlocal softtabstop=2
    setlocal cinoptions=(0,u0
    setlocal expandtab
    let g:myStatusStyle="job"
endfun

" Define own style to revert to normal
function! Own_Style()
    let my_tab=4
    execute "setlocal shiftwidth=".my_tab
    execute "setlocal softtabstop=".my_tab
    setlocal expandtab
    let g:myStatusStyle="own"
endfun

" Functions to save current vim session
" Adapted from:
" https://github.com/rnaveiras/vim-git-session/blob/master/plugin/git-session.vim
"
" To autosave when vim exits, use something like:
"   if exists('g:session_autosave') && g:session_autosave == 'yes'
"      au BufLeave * call MySaveCurrentSession()
"   endif
"
function! s:mySessionDate()
    let s:myDate = strftime("%Y%m%d%H%M")
    return s:myDate
endfun

function! MySaveCurrentSession()
    let l:mySessionName = input('Session name: ')
    let s:mySessionFileName = s:mySessionPath . l:mySessionName . ".vim"
    execute "mksession! " . s:mySessionFileName
    redraw
    echo "Session saved -> " . s:mySessionFileName
endfun

function! MyToggleBackground()
    if &background == "light" 
        exe ":se bg=dark"
    else
        exe ":se bg=light"
    endif
endfun

" Function to print the tab number
if exists("+showtabline")
     function! MyTabLine()
         let s = ''
         let t = tabpagenr()
         let i = 1
         while i <= tabpagenr('$')
             let buflist = tabpagebuflist(i)
             let winnr = tabpagewinnr(i)
             let s .= '%' . i . 'T'
             let s .= (i == t ? '%1*' : '%2*')
             let s .= ' '
             let s .= i . ')'
             let s .= ' %*'
             let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
             let file = bufname(buflist[winnr - 1])
             let file = fnamemodify(file, ':p:t')
             if file == ''
                 let file = '[No Name]'
             endif
             let s .= file
             let i = i + 1
         endwhile
         let s .= '%T%#TabLineFill#%='
         let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
         return s
     endfunction
     set stal=2
     set tabline=%!MyTabLine()
endif

" Function to execute a command and output the results in a preview window
function! RunAndPreview(cmd)
    silent! exe "noautocmd botright pedit ".a:cmd
    noautocmd wincmd P
    set buftype=nofile
    exe "noautocmd r! ".a:cmd
    noautocmd wincmd p
endfun
com! -nargs=1 RunAndPreview :call RunAndPreview("<args>")


" Mappings {{{1
"-----------------------------------------------------------------------------
"
" Useful mappings

" Set Leader to ","
let mapleader = ","

" Use Ctrl+X to save file is edit and command modes
inoremap <c-x> <c-o>:w<cr>
nnoremap <c-x> :w<cr>

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" Map ,r to reload .vimrc
map <Leader>r :source $HOME/.vimrc<CR>:echo "vimrc reloaded"<CR>

" Remove this annoying <C-w>o binding (does not behave as in tmux)
nnoremap <C-w>o <C-w>p

" LaTeX-related keybindings
map <Leader>lc :!pdflatex %<CR>

" IDE-related mappings
nmap <Leader>f :find *
nmap <Leader>t :tj 

" Function-key mapping
nnoremap <F12> :TlistToggle<CR>

" Easier formatting of paragraphs (I never use ex-mode)
vmap Q gq
nmap Q gqap

" move by row rather than by line
nnoremap j gj
nnoremap k gk

" style ------------------------------------------------------------- ,s ---
" FreeBSD mapping to switch current buffer to style(9).  This is generally '\f'.
nmap <silent> <Leader>sf :call FreeBSD_Style()<CR>

" mapping to switch current buffer to $job style
nmap <silent> <Leader>sj :call Job_Style()<CR>

" revert to my style
nmap <silent> <Leader>so :call Own_Style()<CR>

" Vim-related ------------------------------------------------------- ,v ---
" save vim session (to be used with -S next time vim is launched)
nmap <silent> <Leader>vs :call MySaveCurrentSession()<CR>
nmap <silent> <Leader>vb :call MyToggleBackground()<CR>

" White characters -------------------------------------------------- ,w ---
" map the TabToggle function (switch between spaces and tabs)
" note that the autocmd VimEnter trick is used so that this mapping is sourced
" after the plugins are (,wt is already defined in the wiki plugin and would
" override my own definition as plugins are sourced after the vimrc)
autocmd VimEnter * noremap <Leader>wt mz:execute TabToggle()<CR>'z
" toggle the hidden characters on or off
nmap <Leader>wh :set list!<CR>
" highlight 80th column
nmap <Leader>w8 :call ToggleEightyColumnMark()<CR>

" Code ------------------------------------------------------------- ,c ---
" _v_ersion control systems
nmap <Leader>cvo :!cleartool co -nc %<CR>
nmap <Leader>cvu :!cleartool unco -keep %<CR>
nmap <Leader>cvi :!cleartool ci -nc %<CR>
nmap <Leader>cvh :!cleartool lsh % \| head -1<CR>
nmap <Leader>cvl :!cleartool lsco -me -a -short<CR>

" _c_ompilation
nmap <Leader>ccm mM :make<CR>
nmap <Leader>cco :botright :copen 5<CR>
nmap <Leader>ccc :cclose<CR>
nmap <Leader>ccn :cnext<CR>
nmap <Leader>ccp :cprevious<CR>

" generic (often used)
nmap <Leader>ch :call SwitchSourceHeader()<CR>
nmap <Leader>ct :!~/opt/bin/ctags -R --languages=c++ --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

" Unite --------------------------------------------------------- space ---
nmap <Space> [unite]
nnoremap [unite] <nop>

nnoremap <silent> [unite]<space> :<C-u>Unite -start-insert -toggle -auto-resize -buffer-name=mixed file_rec/async:! buffer file_mru bookmark<cr><c-u>
nnoremap <silent> [unite]f :<C-u>Unite -start-insert -toggle -auto-resize -buffer-name=files file_rec/async:!<cr><c-u>
nnoremap <silent> [unite]y :<C-u>Unite -buffer-name=yanks history/yank<cr>
nnoremap <silent> [unite]l :<C-u>Unite -auto-resize -buffer-name=line line<cr>
nnoremap <silent> [unite]b :<C-u>Unite -auto-resize -buffer-name=buffers buffer file_mru<cr>
nnoremap <silent> [unite]/ :<C-u>Unite -no-quit -buffer-name=search grep:.<cr>
nnoremap <silent> [unite]m :<C-u>Unite -auto-resize -buffer-name=mappings mapping<cr>
nnoremap <silent> [unite]s :<C-u>Unite -quick-match buffer<cr>


" Indentation {{{1
"-----------------------------------------------------------------------------
"
" Default indentation settings
call Job_Style()


" Abbreviations {{{1
"-----------------------------------------------------------------------------
"
ab _dt <C-R>=strftime("%a, %d %b %Y %H:%M:%S")<CR>


" Modes: File types and Autocommands {{{1
"-----------------------------------------------------------------------------

" vim {{{2
"-----------------------------------------------------------------------------
"
" highlight long lines (taken from http://blog.ezyang.com/2010/03/vim-textwidth/)
"augroup own_vim-autocmds
"  au BufEnter * highlight OverLength ctermbg=blue guibg=#592929
"  au BufEnter * match OverLength /\%79v.*/
"augroup END

" Above simply replaced by using the colorcolumn variable (see ToggleEightyColumnMark)


" FreeBSD {{{2
"-----------------------------------------------------------------------------
"
" Edit FreeBSD DocBook files
augroup own_fbsd-sgml
  au!

  " Correction for highlighting special characters
  au BufEnter *.sgml,*.ent,*.html syn match sgmlSpecial "&[^;]*;"

  " Formatting FreeBSD SGML/DocBook
  au BufEnter *.sgml,*.ent
     \ set autoindent formatoptions=tcq2l
     \ textwidth=70 shiftwidth=2 softtabstop=2 tabstop=8

  " mappings
  au BufEnter *.sgml,*.ent,*.html imap <buffer> ''a &agrave;
  au BufEnter *.sgml,*.ent,*.html imap <buffer> ''e &egrave;
  au BufEnter *.sgml,*.ent,*.html imap <buffer> 'e &eacute;

augroup END

" Plugins {{{1
"-----------------------------------------------------------------------------

" netrw {{{2
"-----------------------------------------------------------------------------
" do not display info on top of netrw window
let g:netrw_banner = 0

" tree view
let g:netrw_liststyle = 3

" open tree on left
let g:netrw_altv = 1

" unite {{{2
"-----------------------------------------------------------------------------
let g:unite_source_history_yank_enable=1
let g:unite_source_rec_unit=1000
let g:unite_source_rec_max_cache_files=5000
let g:unite_redraw_hold_candidates=50000


" vimwiki {{{2
"-----------------------------------------------------------------------------
let g:vimwiki_list = [
    \ {'path': '~/doc/wikis/todo/', 'path_html': '~/doc/wikis/html/todo'},
    \ {'path': '~/doc/wikis/misc/', 'path_html': '~/doc/wikis/html/misc'}]

" taglist {{{2
"-----------------------------------------------------------------------------
let Tlist_WinWidth = 45
let Tlist_Display_Tag_Scope = 0
let Tlist_Use_SingleClick = 1

" omnicppcomplete {{{2
"-----------------------------------------------------------------------------
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 0 " autocomplete after .
let OmniCpp_MayCompleteArrow = 0 " autocomplete after ->
let OmniCpp_MayCompleteScope = 0 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest


" GUI {{{1
"-----------------------------------------------------------------------------
set guicursor=a:blinkon0
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=R  "remove right-hand scroll bar
set guioptions-=l  "remove left-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar
set guioptions-=b  "remove bottom scroll bar
set guioptions-=e  "use a console-stype tabs panel
highlight Normal guibg=Black guifg=White
set guifont=Source\ Code\ Pro\ Regular\ 10  " use se guifont=* to open a window to choose font
" set guifont=MiscFixed

if has('gui_running')
  set cursorline
  colorscheme solarized
else
  set t_Co=256
  colorscheme mustang
endif 


" $Job-related {{{1
"-----------------------------------------------------------------------------
set makeprg=clearmake\ mode=opt\ $*


" Modeline {{{1
"-----------------------------------------------------------------------------
"
" vim:fdm=marker:
