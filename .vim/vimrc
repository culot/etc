" Intro {{{
"
" My vimrc was inspired by the following ones:
"   * example found in original distribution
"   * http://vim.wikia.com/wiki/Example_vimrc
"
" After editing .vimrc file, use one of the following to reload:
"   :so %
"   :so $MYVIMRC (:echo $MYVIMRC to see what config file is in use)
"
" To better view this file, use folding:
"   :se fdm=marker
" and then zM or zR to close or open all folds
"
" }}}

" Changelog {{{
"
"   2012-06-29 - Creation
"   2012-09-12 - Status line format added
"   2012-10-10 - Default directory for swap files set
"   2013-02-17 - Long lines highlighting added
"   2013-03-05 - Update GUI options + add LaTeX-related keybindings
"   2013-03-06 - Remap this annoying <C-w>o keybinding
"   2013-03-11 - Function added to toggle between tabs and spaces
"   2013-04-26 - Highlighting of hidden characters (tabs, spaces) added
"   2013-06-27 - Add a function to convert a buffer to style(9),
"                use <Leader> in mappings,
"                add vimwiki plugin options
"   2013-09-12 - Add a style for $job code and my own style
"                add a tag in statusline to show current style
"                add the ability to save current vim session
"                new way of highlighting the 80th column
"                tab number added in tabline
"   2014-02-03 - remap Q (never use ex-mode)
"   2015-03-18 - Adapt GUI options (theme, font) and add some
"                features to navigate between files (path,
"                keybindings to find files, tags...)
"   2015-03-19 - Add a function to switch between header and source files
"   2015-04-15 - Add configuration variables for taglist and
"                omnicppcomplete plugins
"                add keybindings related to quickfix window
"   2015-10-02 - Adapt colorscheme depending on if the gui is run or not
"                Anonymize so that this config file could be uploaded to
"                a public git repo
"   2015-10-07 - Function to save session now takes a session name as
"                input
"   2015-10-08 - Set a few variables such as t_Co, scrolloff, wildignore,...
"   2015-10-14 - Try a new shortcut to quickly save in insert mode, and
"                prevent swap files from being created
"   2015-10-30 - New keybinding to quickly switch between light and dark
"                background, and increase default font size. I'm getting old :'(
"   2015-12-22 - A few variables added for netrw
"   2015-12-23 - Bindings and configuration for Unite plugin added
"   2016-02-12 - Add a new style for c++ code
"   2019-08-21 - Back to vim after a few years with emacs:
"                vimrc cleanup, a few modules added (see dependencies section)
"
" }}}

" Dependencies {{{
"
" The following plugins are needed:
"   * lang
"     - vim-go | https://vimawesome.com/plugin/vim-go-sparks-fly
"   * ui
"     - ctrlp | https://vimawesome.com/plugin/ctrlp-vim-everything-has-changed
"     - solarized8 | https://vimawesome.com/plugin/solarized-8
"     - vim-startify | https://vimawesome.com/plugin/vim-startify
"
" Note: to add new plugins, just add them as submodules like
"       git submodule add https://github.com/fatih/vim-go.git pack/lang/start/vim-go
"
" }}}

" Paths {{{
"
set path=$PWD/**
set tags=./tags;

if has('unix')
    let $VIMHOME = $HOME."/.vim"
else
    let $VIMHOME = $HOME."/vim"
endif

" Set the default directory to store swap files
let $SWAPDIR = $VIMHOME."/swap"
set dir=$SWAPDIR

let s:SESSIONDIR = $VIMHOME."/session/"

" }}}

" Options {{{
"
" Attempt to determine the type of a file based on its name and possibly its
" contents.  Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype plugin indent on

" Enable syntax highlighting
syntax on

" One of the most important options to activate. Allows you to switch from an
" unsaved buffer without saving it first. Also allows you to keep an undo
" history for multiple files. Vim will complain if you try to quit without
" saving, and swap files will keep you safe if your computer crashes.
set hidden

" Better command-line completion
set wildmenu
set wildignore=*.o

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell.  If visualbell is set, and
" this line is also included, vim will neither flash nor beep.  If visualbell
" is unset, this does nothing.
set t_vb=

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" This is the list of hidden characters that will be displayed
" when using ':set list' (see mappings)
set listchars=eol:$,tab:>-,trail:.,extends:>,precedes:<,nbsp:_

" }}}

" Functions {{{
"

" allow toggling between local and default mode
" (taken from: http://vim.wikia.com/wiki/Toggle_between_tabs_and_spaces)
function! TabToggle()
    if &expandtab
        set noexpandtab
    else
        set expandtab
    endif
endfunction

function! DefaultStyle()
    set noexpandtab
    set tw=0
    set ts=4
    set sw=0
endfun

function! ChangeTW()
    let l:newTW = input('Text Width: ')
    exe ":se tw=".newTW
endfun

function! ChangeTS()
    let l:newTS = input('Tab Stop: ')
    exe ":se ts=".newTS
endfun

" Convenient grep function:
" search for the given pattern in all files with the given extenstion,
" in the current directory and below hierarchy.
" Put the results in quickfix list, but without jumping to the 1st result
function! MyGrep(fext)
	let l:pattern = input('Search pattern: ')
	exe ":vimgrep /".pattern."/j ../**/*".a:fext
endfun

" Functions to save current vim session
" Adapted from:
" https://github.com/rnaveiras/vim-git-session/blob/master/plugin/git-session.vim
"
" To autosave when vim exits, use something like:
"   if exists('g:session_autosave') && g:session_autosave == 'yes'
"      au BufLeave * call MySaveCurrentSession()
"   endif
"
function! MySaveCurrentSession()
    let l:mySessionName = input('Session name: ')
    let s:mySessionFileName = s:SESSIONDIR . l:mySessionName . ".vim"
    execute "mksession! " . s:mySessionFileName
    redraw
    echo "Session saved -> " . s:mySessionFileName
endfun

function! MyLoadSession()
    let l:mySessionName = input('Session name: ')
    let s:mySessionFileName = s:SESSIONDIR . l:mySessionName . ".vim"
	execute "source " . s:mySessionFileName
	echo "Session loaded -> " . s:mySessionFileName
endfun
 
function! MyToggleBackground()
    if &background == "light" 
        exe ":se bg=dark"
    else
        exe ":se bg=light"
    endif
endfun

" Function to print the tab number
if exists("+showtabline")
     function! MyTabLine()
         let s = ''
         let t = tabpagenr()
         let i = 1
         while i <= tabpagenr('$')
             let buflist = tabpagebuflist(i)
             let winnr = tabpagewinnr(i)
             let s .= '%' . i . 'T'
             let s .= (i == t ? '%1*' : '%2*')
             let s .= ' '
             let s .= i . ')'
             let s .= ' %*'
             let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
             let file = bufname(buflist[winnr - 1])
             let file = fnamemodify(file, ':p:t')
             if file == ''
                 let file = '[No Name]'
             endif
             let s .= file
             let i = i + 1
         endwhile
         let s .= '%T%#TabLineFill#%='
         let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
         return s
     endfunction
     set stal=2
     set tabline=%!MyTabLine()
endif

" }}}

" Mappings {{{
"
" I use <space> as my leader key in normal mode, and <C-space> in insert node
map <space> <Leader>

" Use F1 to save file in edit and command modes
inoremap <F1> <c-o>:w<cr>
nnoremap <F1> :w<cr>

" Or use the following shortcut
nnoremap <leader>w :w<CR>

" Easier formatting of paragraphs (I never use ex-mode)
vmap Q gq
nmap Q gqap

" move by row rather than by line
nnoremap j gj
nnoremap k gk

" Delete in insert mode (CTRL-W already defined to delete a word backward)
inoremap <C-d> <Del>

" To quickly switch between buffer, window manager style
nnoremap <Leader>1 1gt
nnoremap <Leader>2 2gt
nnoremap <Leader>3 3gt
nnoremap <Leader>4 4gt
nnoremap <Leader>5 5gt
nnoremap <Leader>6 6gt
nnoremap <Leader>7 7gt
nnoremap <Leader>8 8gt
nnoremap <Leader>9 9gt

nnoremap L gt
nnoremap H gT

nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l

" In insert or command mode, move normally by using Ctrl-*
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
inoremap <C-e> <C-o>$
inoremap <C-a> <C-o>0

" Insert mode ------------------------------------------------ Ctrl-Space --
" Specific bindings to save time when in Insert mode
" The Ctrl-Space leader is used for the following mappings
" (translated to C-@, use C-v C-Space to check what key is sent)
inoremap <C-@>w <c-o>:w<cr>

" style ------------------------------------------------------------- ,s ---
nmap <silent> <Leader>stt :call TabToggle()<CR>
nmap <silent> <Leader>stw :call ChangeTW()<CR>
nmap <silent> <Leader>sts :call ChangeTS()<CR>

" revert to default style
nmap <silent> <Leader>sd :call DefaultStyle()<CR>

" toggle the hidden characters on or off
nmap <Leader>sh :set list!<CR>

" Vim-related ------------------------------------------------------- ,v ---
nmap <silent> <Leader>ve :e $MYVIMRC<CR>
nmap <silent> <Leader>vr :source $MYVIMRC<CR>:echo "vimrc reloaded"<CR>
nmap <silent> <Leader>vb :call MyToggleBackground()<CR>
" save vim session (to be used with -S next time vim is launched)
nmap <silent> <Leader>vss :call MySaveCurrentSession()<CR>
nmap <silent> <Leader>vsl :call MyLoadSession()<CR>
" Map redraw screen to also turn off search highlighting until the
" next search
nmap <silent> <Leader>vl :nohl<CR><C-L>

" Netrw tree explorer ----------------------------------------------- ,t ---
nmap <Leader>tt :Lexplore<CR>
nmap <Leader>t. :Lexplore %:h<CR> " Open current file's directory

" Files ------------------------------------------------------------- ,f ---
nmap <Leader>fr :browse oldfiles<CR>

" Code ------------------------------------------------------------- ,c ---
" _c_ompilation
nnoremap <Leader>cm mM :make<CR>
nnoremap <Leader>co :botright :copen 5<CR>
nnoremap <Leader>cc :cclose<CR>
nnoremap <Leader>cn :cnext<CR>
nnoremap <Leader>cp :cprevious<CR>

" Go --------------------------------------------------------------- ,g ---
" Requires the vim-go plugin
nmap <Leader>gb mh:GoBuild<CR> " mark the current point to go back easily
nmap <Leader>gr :GoRun<CR>
nmap <Leader>gi :GoInstall<CR>
nmap <Leader>gt mh:GoTest<CR>
nmap <Leader>gl :GoLint<CR>
nmap <Leader>gn :GoRename<CR>
nmap <Leader>g? :GoDoc<CR>
nmap <Leader>gd :GoDef<CR>
nmap <Leader>gc :GoCoverage<CR> " great feature!
nmap <Leader>gg :call MyGrep(".go")<CR>

" }}}

" Indentation {{{
"
" Default indentation settings
call DefaultStyle()

" }}}

" Abbreviations {{{
"
ab _dt <C-R>=strftime("%a, %d %b %Y %H:%M:%S")<CR>

" }}}

" Plugins {{{

" netrw 
" do not display info on top of netrw window
let g:netrw_banner = 0
" tree view
let g:netrw_liststyle = 3
" open tree on left
let g:netrw_altv = 1
let g:netrw_browse_split = 4
let g:netrw_winsize = 15

" }}}

" Status line {{{

" Always display the status line, even if only one window is displayed
set laststatus=2

" To see current highlight groups configuration, use :highlight
set stl=
set stl+=<<\ %t\ >>\  "file name
set stl+=%#WarningMsg#
set stl+=%m "modified flag
set stl+=%r "read only flag
set stl+=%*
set stl+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set stl+=%{&ff}] "file format
set stl+=%y "filetype
set stl+=%= "left/right separator
set stl+=\ (<-%{&tw}->\|%{&ts}%{&expandtab?'--':'>-'}) "current style
set stl+=[%l\ %c]\ %P "[cursor line | column number] Percentage

" }}}

" UI {{{

" Enable use of the mouse for all modes
" (allows to click on tabs and scroll with mouse even inside terminal :)
if has('mouse')
  set mouse=a
endif

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Add a few lines around the cursor so that the context is easier to get
set scrolloff=5

" Apparently it helps with performance when executing macros
set lazyredraw

set guicursor=a:blinkon0
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=R  "remove right-hand scroll bar
set guioptions-=l  "remove left-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar
set guioptions-=b  "remove bottom scroll bar
set guioptions-=e  "use a console-stype tabs panel
"highlight Normal guibg=Black guifg=White
"set guifont=Source\ Code\ Pro\ Regular\ 10  " use se guifont=* to open a window to choose font
"set guifont=Consolas:h11
"colorscheme solarized

if has('gui_running')
  set cursorline
  colorscheme solarized
else
  set background=light
  colorscheme solarized8
endif 

" }}}

" Modeline {{{1
"-----------------------------------------------------------------------------
"
" vim:fdm=marker:
